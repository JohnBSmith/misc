
use std::fmt::Write;

fn power_set(a: &[i32]) -> String {
    let mut acc = String::from("[");
    let mut first = true;
    crate::comb::power_set(a, &mut |s| {
        if first {first = false;} else {acc.push_str(", ");}
        let _ = write!(acc, "{:?}", s);
    });
    acc.push_str("]");
    acc
}

#[test]
fn test0() {
    assert_eq!(power_set(&[]), "[[]]");
    assert_eq!(power_set(&[0]), "[[], [0]]");
    assert_eq!(power_set(&[0, 1]), "[[], [0], [1], [0, 1]]");
    assert_eq!(power_set(&[0, 1, 2]),
        "[[], [0], [1], [2], [0, 1], [0, 2], [1, 2], [0, 1, 2]]");
    assert_eq!(power_set(&[0, 1, 2, 3]),
        "[[], [0], [1], [2], [3], \
          [0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3], \
          [0, 1, 2], [0, 1, 3], [0, 2, 3], [1, 2, 3], [0, 1, 2, 3]]");
    assert_eq!(power_set(&[0, 1, 2, 3, 4]),
        "[[], [0], [1], [2], [3], [4], \
          [0, 1], [0, 2], [0, 3], [0, 4], [1, 2], \
          [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], \
          [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], \
          [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], \
          [0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 3, 4], [0, 2, 3, 4], \
          [1, 2, 3, 4], [0, 1, 2, 3, 4]]");
}
