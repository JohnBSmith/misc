<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Anleitung zu verify</title>
  <style>
body{
  font-family: "DejaVu Sans", "Verdana", sans-serif;
  color: #30302a;
  line-height: 1.5;
  max-width: 46em;
  margin-top: 2em;
  margin-left: 10%;
  margin-bottom: 10em;
  padding-left: 4%;
  padding-right: 4%;
}
pre, code{
  font-family: "DejaVu Sans Mono", "Menlo", "Consolas", monospace;
}
@media(max-width: 64em){
  body{margin-left: auto; margin-right: auto;}
}
h2{
  font-weight: normal;
  border-bottom: 2px solid #b4b4b0;
}
a{color: #20506a; text-decoration: none;}
a:hover{color: #102a40; text-decoration: underline;}
.indent {
  margin-left: 1.6em;
}
.ibox {
  background-color: #f4f4e6;
  border-left: 6px solid #d2d2c8;
  padding: 8px 12px;
}
.cmd {
  background-color: #303040;
  color: #f0f0f0;
  border-left: 6px solid #909090;
  padding: 6px 12px;
}
  </style>
</head>
<body>

<br>
<h1>verify &mdash; Ein winziger Beweisprüfer</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Einfuehrung">Einführung</a>
<li><a href="#Anleitung">Anleitung</a>
<li><a href="#KdnS">Natürliches Schließen</a>
</ol>

<h2 id="Einfuehrung">Einführung</h2>

<p>Das Programm <code>verify.py</code> stellt einen minimalistischen
Beweisprüfer für Hilbert-Kalküle der Aussagenlogik dar.

<p>Der Prüfer verarbeitet eine einzige Schlussregel, den Modus ponens.
Die Axiome des betrachteten Hilbert-Kalküls sind nicht im Programm
selbst kodiert, sondern werden in der Eingabedatei festgelegt,
am besten alle zu Beginn.

<p>Gearbeitet wird ausschließlich mit Schemata, das heißt, jedes Axiom
und jedes Theorem stellt ein Schema dar. Damit meint man, dass die
in der aussagenlogischen Formel auftretenden Variablen metasprachliche
sind, die gegen beliebige Formeln ersetzt werden dürfen. Echte atomare
Variablen, die unter Umständen nur in einer bestimmten Interpretation
gültig sein sollen, sind nicht verfügbar. Das heißt, das System arbeitet
ausschließlich mit Tautologien entsprechenden Schemata.

<h2 id="Anleitung">Anleitung</h2>

<p>Wir schreiben zunächst eine Datei <code>Beweise.txt</code> mit
folgendem Inhalt. Die Junktoren dürfen in ASCII-Notation eingegeben
werden.

<pre class="ibox">
ax1. A -&gt; (B -&gt; A), axiom.
ax2. (A -&gt; (A -&gt; B)) -&gt; (A -&gt; B), axiom.
ax3. (A -&gt; B) -&gt; ((B -&gt; C) -&gt; (A -&gt; C)), axiom.

1. A -&gt; (A -&gt; A), ax1.
hypo. A -&gt; A, ax2 1.
</pre>

<p>Die drei Axiome sind aus <i>Grundlangen der Mathematik&nbsp;1</i>
von David Hilbert und Paul Bernays auf S.&nbsp;65 entnommen. Daraufhin folgt
der sehr kurze Beweis des Theorems <var>A</var>&nbsp;→&nbsp;<var>A</var>,
das den Namen <code>hypo</code> erhält. Der Beweis besteht aus
zwei Schritten. Im ersten Schritt wird die Formel
<var>A</var>&nbsp;→&nbsp;(<var>A</var>&nbsp;→&nbsp;<var>A</var>) per
simultaner Substitution <var>A</var>&nbsp;:=&nbsp;<var>A</var> und
<var>B</var>&nbsp;:=&nbsp;<var>A</var> aus dem Axiom <code>ax1</code>
abgeleitet. Im zweiten Schritt wird der Modus ponens auf das
Axiom <code>ax2</code> und die erste Formel angewendet, wobei die
Variablen von <code>ax2</code> wie zuvor automatisch substituiert werden.

<p>Zur Prüfung ruft man das Programm nun mit der Datei als Argument auf:

<pre class="cmd">
verify.py Beweise.txt
</pre>

<p>Wenn man möchte, kann die ASCII-Notation außerdem mit

<pre class="cmd">
verify.py -f Beweise.txt Beweise.txt
</pre>

<p>formatiert werden. Man erhält:

<pre class="ibox">
ax1. A → (B → A), axiom.
ax2. (A → (A → B)) → (A → B), axiom.
ax3. (A → B) → ((B → C) → (A → C)), axiom.

1. A → (A → A), ax1.
hypo. A → A, ax2 1.
</pre>

<p>Da die Subjunktion rechtsassoziativ ist, dürfen einige Klammern
entfallen.

<pre class="ibox">
ax1. A → B → A, axiom.
ax2. (A → A → B) → A → B, axiom.
ax3. (A → B) → (B → C) → A → C, axiom.

1. A → A → A, ax1.
hypo. A → A, ax2 1.
</pre>

<h2 id="KdnS">Natürliches Schließen</h2>

<p>Es ist möglich, das natürliche Schließen gewissermaßen in Form
eines Hilbert-Kalküls darzustellen. Die geläufige Notation
Γ&nbsp;⊢&nbsp;<var>A</var> bedeutet, dass die Formel <var>A</var> aus
den Formeln der Formelmenge Γ herleitbar ist. Sofern Γ endlich ist, kann
man diesen Begriff von der Metasprache in den Kalkül selbst verschieben
und spricht daraufhin von einer Sequenz. Beim natürlichen Schließen von
Sequenzen leitet man Sequenzen aus bereits vorhandenen Sequenzen ab.
Wir fassen die Formeln von Γ nun zu einer Konjunktion <var>H</var>
zusammen, was für Hypothese stehen soll. Man ist sich darüber im Klaren,
dass die beiden Urteile <var>H</var>&nbsp;⊢&nbsp;<var>A</var> und
⊢&nbsp;<var>H</var>&nbsp;→&nbsp;<var>A</var> äquivalent sind.

<p>Die Schlussregel zur Einführung der Konjunktion, laut der

<p class="indent">von Γ&nbsp;⊢&nbsp;<var>A</var> und Γ&nbsp;⊢&nbsp;<var>A</var>
auf Γ&nbsp;⊢&nbsp;<var>A</var>&nbsp;∧&nbsp;<var>B</var>

<p>geschlossen werden darf, lässt sich nun kodieren als das Schema

<p class="indent">(<var>H</var> → <var>A</var>) → (<var>H</var> → <var>B</var>)
→ (<var>H</var> → <var>A</var> ∧ <var>B</var>),

<p>das sich wie gewünscht als tautologisch herausstellt, wie man
vermittels einer Wahrheitstafel prüft. Um mit der Formel arbeiten zu
können, bedarf es lediglich des Modus ponens.

<p>Der Beweis von <var>A</var>&nbsp;∧&nbsp;<var>B</var>&nbsp;→
<var>B</var>&nbsp;∧&nbsp;<var>A</var> läuft zum Beispiel
folgendermaßen ab.

<pre class="ibox">
hypo. H → H, axiom.
conj_eliml. (H → A ∧ B) → (H → A), axiom.
conj_elimr. (H → A ∧ B) → (H → B), axiom.
conj_intro. (H → A) → (H → B) → (H → A ∧ B), axiom.

1. A ∧ B → A ∧ B, hypo.
2. A ∧ B → A, conj_eliml 1.
3. A ∧ B → B, conj_elimr 1.
conj_comm. A ∧ B → B ∧ A, conj_intro 3 2.
</pre>

</body>
</html>
