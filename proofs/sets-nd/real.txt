
(*/chapter The real numbers *)

(*/section Axiomatic definition *)

0. ⊢ ℝ = _, def.
0. ⊢ a + b = _, def.
0. ⊢ a⋅b = _, def.
0. ⊢ -a = _, def.
rsub_eq. ⊢ a - b = a + (-b), def.

0. ⊢ x ≤ y ↔ _, def.
lt_eq. ⊢ x < y ↔ x ≤ y ∧ ¬x = y, def.

real_is_set. ⊢ set ℝ, axiom.
radd_closed. ⊢ a ∈ ℝ → b ∈ ℝ → a + b ∈ ℝ, axiom.
rmul_closed. ⊢ a ∈ ℝ → b ∈ ℝ → a⋅b ∈ ℝ, axiom.
rneg_closed. ⊢ a ∈ ℝ → -a ∈ ℝ, axiom.

radd_comm. ⊢ a ∈ ℝ → b ∈ ℝ →
  a + b = b + a, axiom.
rmul_comm. ⊢ a ∈ ℝ → b ∈ ℝ →
  a⋅b = b⋅a, axiom.
radd_neutr. ⊢ a ∈ ℝ → a + 0 = a, axiom.
radd_inv. ⊢ a ∈ ℝ → a + (-a) = 0, axiom.
rmul_neutr. ⊢ a ∈ ℝ → a⋅1 = a, axiom.
radd_assoc. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  (a + b) + c = a + (b + c), axiom.
rmul_assoc. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  (a⋅b)⋅c = a⋅(b⋅c), axiom.
rmul_distl_add. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a⋅(b + c) = a⋅b + a⋅c, axiom.

rle_refl. ⊢ a ∈ ℝ → a ≤ a, axiom.
rle_trans. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ → a ≤ b → b ≤ c → a ≤ c, axiom.
rle_antisym. ⊢ a ∈ ℝ → b ∈ ℝ → a ≤ b → b ≤ a → a = b, axiom.
rle_total. ⊢ a ∈ ℝ → b ∈ ℝ → a ≤ b ∨ b ≤ a, axiom.
rle_compat_add. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a ≤ b → a + c ≤ b + c, axiom.
rle_compat_mul. ⊢ a ∈ ℝ → b ∈ ℝ →
  0 ≤ a → 0 ≤ b → 0 ≤ a⋅b, axiom.


(*/section Basic results *)

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 2 ⊢ -b ∈ ℝ, rneg_closed 2.
04. 1, 2 ⊢ a + -b ∈ ℝ, radd_closed 1 3.
05. 1, 2 ⊢ a - b ∈ ℝ,
  eq_subst_rev rsub_eq 4, P t ↔ t ∈ ℝ.
rsub_closed. ⊢ a ∈ ℝ → b ∈ ℝ → a - b ∈ ℝ,
  subj_intro_ii 5.

01. 1 ⊢ a ∈ ℝ, hypo.
02. ⊢ 0 ∈ ℝ, calc.
03. 1 ⊢ a + 0 = a, radd_neutr 1.
04. 1 ⊢ 0 + a = a + 0, radd_comm 2 1.
05. 1 ⊢ 0 + a = a, eq_trans 4 3.
radd_neutl. ⊢ a ∈ ℝ → 0 + a = a, subj_intro 5.

01. 1 ⊢ a ∈ ℝ, hypo.
02. ⊢ 1 ∈ ℝ, calc.
03. 1 ⊢ a⋅1 = a, rmul_neutr 1.
04. 1 ⊢ 1⋅a = a⋅1, rmul_comm 2 1.
05. 1 ⊢ 1⋅a = a, eq_trans 4 3.
rmul_neutl. ⊢ a ∈ ℝ → 1⋅a = a, subj_intro 5.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 1, 2 ⊢ a + b ∈ ℝ, radd_closed 1 2.
04. 2 ⊢ -b ∈ ℝ, rneg_closed 2.
05. ⊢ a + b - b = a + b + -b, rsub_eq.
06. 1, 2 ⊢ a + b + -b = a + (b + -b), radd_assoc 1 2 4.
07. 1, 2 ⊢ a + b - b = a + (b + -b), eq_trans 5 6.
08. 2 ⊢ b + -b = 0, radd_inv 2.
09. 1, 2 ⊢ a + b - b = a + 0, eq_subst 8 7,
  P t ↔ a + b - b = a + t.
10. 1 ⊢ a + 0 = a, radd_neutr 1.
11. 1, 2 ⊢ a + b - b = a, eq_trans 9 10.
radd_cancel. ⊢ a ∈ ℝ → b ∈ ℝ → a + b - b = a,
  subj_intro_ii 11.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ a + c = b + c, hypo.
05. 4 ⊢ a + c - c = b + c - c, f_equal 4, f t = t - c.
06. 1, 3 ⊢ a + c - c = a, radd_cancel 1 3.
07. 2, 3 ⊢ b + c - c = b, radd_cancel 2 3.
08. 1, 3, 4 ⊢ a = b + c - c, eq_trans_ll 6 5.
09. 1, 2, 3, 4 ⊢ a = b, eq_trans 8 7.
radd_cancel_rr. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a + c = b + c → a = b, subj_intro_iv 9.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ c + a = c + b, hypo.
05. 1, 3 ⊢ a + c = c + a, radd_comm 1 3.
06. 2, 3 ⊢ c + b = b + c, radd_comm 3 2.
07. 1, 3, 4 ⊢ a + c = c + b, eq_trans 5 4.
08. 1, 2, 3, 4 ⊢ a + c = b + c, eq_trans 7 6.
09. 1, 2, 3, 4 ⊢ a = b, radd_cancel_rr 1 2 3 8.
radd_cancel_ll. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  c + a = c + b → a = b, subj_intro_iv 9.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ c + a = b + c, hypo.
05. 1, 3 ⊢ a + c = c + a, radd_comm 1 3.
06. 1, 3, 4 ⊢ a + c = b + c, eq_trans 5 4.
07. 1, 2, 3, 4 ⊢ a = b, radd_cancel_rr 1 2 3 6.
radd_cancel_lr. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  c + a = b + c → a = b, subj_intro_iv 7.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ a + c = c + b, hypo.
05. 2, 3 ⊢ c + b = b + c, radd_comm 3 2.
06. 2, 3, 4 ⊢ a + c = b + c, eq_trans 4 5.
07. 1, 2, 3, 4 ⊢ a = b, radd_cancel_rr 1 2 3 6.
radd_cancel_rl. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a + c = c + b → a = b, subj_intro_iv 7.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 1, 2 ⊢ a + b ∈ ℝ, radd_closed 1 2.
05. 1, 2, 3 ⊢ (a + b)⋅c = c⋅(a + b), rmul_comm 4 3.
06. 1, 2, 3 ⊢ c⋅(a + b) = c⋅a + c⋅b, rmul_distl_add 3 1 2.
07. 1, 3 ⊢ c⋅a = a⋅c, rmul_comm 3 1.
08. 2, 3 ⊢ c⋅b = b⋅c, rmul_comm 3 2.
09. 1, 2, 3 ⊢ c⋅(a + b) = a⋅c + c⋅b, eq_subst 7 6,
  P t ↔ c⋅(a + b) = t + c⋅b.
10. 1, 2, 3 ⊢ c⋅(a + b) = a⋅c + b⋅c, eq_subst 8 9,
  P t ↔ c⋅(a + b) = a⋅c + t.
11. 1, 2, 3 ⊢ (a + b)⋅c = a⋅c + b⋅c, eq_trans 5 10.
rmul_distr_add. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  (a + b)⋅c = a⋅c + b⋅c, subj_intro_iii 11.

01. 1 ⊢ a ∈ ℝ, hypo.
02. ⊢ 0 ∈ ℝ, calc.
03. ⊢ 0 + 0 = 0, radd_neutr 2.
04. ⊢ a⋅(0 + 0) = a⋅0, f_equal 3, f t = a⋅t.
05. 1 ⊢ a⋅(0 + 0) = a⋅0 + a⋅0, rmul_distl_add 1 2 2.
06. 1 ⊢ a⋅0 + a⋅0 = a⋅0, eq_trans_ll 5 4.
07. 1 ⊢ a⋅0 ∈ ℝ, rmul_closed 1 2.
08. 1 ⊢ a⋅0 + 0 = a⋅0, radd_neutr 7.
09. 1 ⊢ a⋅0 + a⋅0 = a⋅0 + 0, eq_trans_rr 6 8.
10. 1 ⊢ a⋅0 = 0, radd_cancel_ll 7 2 7 9.
rmul_rzero. ⊢ a ∈ ℝ → a⋅0 = 0, subj_intro 10.

01. 1 ⊢ a ∈ ℝ, hypo.
02. ⊢ 0 ∈ ℝ, calc.
03. 1 ⊢ 0⋅a = a⋅0, rmul_comm 2 1.
04. 1 ⊢ a⋅0 = 0, rmul_rzero 1.
05. 1 ⊢ 0⋅a = 0, eq_trans 3 4.
rmul_lzero. ⊢ a ∈ ℝ → 0⋅a = 0, subj_intro 5.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. ⊢ 0 ∈ ℝ, calc.
04. 1 ⊢ a⋅0 = 0, rmul_rzero 1.
05. 2 ⊢ b + -b = 0, radd_inv 2.
06. 2 ⊢ a⋅(b + -b) = a⋅0, f_equal 5, f t = a⋅t.
07. 1, 2 ⊢ a⋅(b + -b) = 0, eq_trans 6 4.
08. 2 ⊢ -b ∈ ℝ, rneg_closed 2.
09. 1, 2 ⊢ a⋅(b + -b) = a⋅b + a⋅(-b), rmul_distl_add 1 2 8.
10. 1, 2 ⊢ 0 = a⋅b + a⋅(-b), eq_trans_ll 7 9.
11. 1, 2 ⊢ 0 + -(a⋅b) = a⋅b + a⋅(-b) + -(a⋅b),
  f_equal 10, f t = t + -(a⋅b).
12. 1, 2 ⊢ a⋅b ∈ ℝ, rmul_closed 1 2.
13. 1, 2 ⊢ -(a⋅b) ∈ ℝ, rneg_closed 12.
14. 1, 2 ⊢ 0 + -(a⋅b) = -(a⋅b), radd_neutl 13.
15. 1, 2 ⊢ -(a⋅b) = a⋅b  + a⋅(-b) + -(a⋅b),
  eq_trans_ll 14 11.
16. 1, 2 ⊢ a⋅(-b) ∈ ℝ, rmul_closed 1 8.
17. 1, 2 ⊢ a⋅b + a⋅(-b) = a⋅(-b) + a⋅b, radd_comm 12 16.
18. 1, 2 ⊢ -(a⋅b) = a⋅(-b) + a⋅b + -(a⋅b),
  eq_subst 17 15, P t ↔ -(a⋅b) = t + -(a⋅b).
19. 1, 2 ⊢ a⋅(-b) + a⋅b + -(a⋅b) = a⋅(-b) + (a⋅b + -(a⋅b)),
  radd_assoc 16 12 13.
20. 1, 2 ⊢ -(a⋅b) = a⋅(-b) + (a⋅b + -(a⋅b)), eq_trans 18 19.
21. 1, 2 ⊢ a⋅b + -(a⋅b) = 0, radd_inv 12.
22. 1, 2 ⊢ -(a⋅b) = a⋅(-b) + 0,
  eq_subst 21 20, P t ↔ -(a⋅b) = a⋅(-b) + t.
23. 1, 2 ⊢ a⋅(-b) + 0 = a⋅(-b), radd_neutr 16.
24. 1, 2 ⊢ -(a⋅b) = a⋅(-b), eq_trans 22 23.
rmul_compatr_neg. ⊢ a ∈ ℝ → b ∈ ℝ → -(a⋅b) = a⋅(-b),
  subj_intro_ii 24.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 1, 2 ⊢ -(b⋅a) = b⋅(-a), rmul_compatr_neg 2 1.
04. 1, 2 ⊢ b⋅a = a⋅b, rmul_comm 2 1.
05. 1, 2 ⊢ -(a⋅b) = b⋅(-a), eq_subst 4 3, P t ↔ -t = b⋅(-a).
06. 1 ⊢ (-a) ∈ ℝ, rneg_closed 1.
07. 1, 2 ⊢ b⋅(-a) = (-a)⋅b, rmul_comm 2 6.
08. 1, 2 ⊢ -(a⋅b) = (-a)⋅b, eq_trans 5 7.
rmul_compatl_neg. ⊢ a ∈ ℝ → b ∈ ℝ → -(a⋅b) = (-a)⋅b,
  subj_intro_ii 8.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. ⊢ b - c = b + (-c), rsub_eq.
05. ⊢ a⋅(b - c) = a⋅(b + (-c)), f_equal 4, f x = a⋅x.
06. 3 ⊢ -c ∈ ℝ, rneg_closed 3.
07. 1, 2, 3 ⊢ a⋅(b + (-c)) = a⋅b + a⋅(-c),
  rmul_distl_add 1 2 6.
08. 1, 2, 3 ⊢ a⋅(b - c) = a⋅b + a⋅(-c), eq_trans 5 7.
09. 1, 3 ⊢ -(a⋅c) = a⋅(-c), rmul_compatr_neg 1 3.
10. 1, 2, 3 ⊢ a⋅(b - c) = a⋅b + -(a⋅c),
  eq_subst_rev 9 8, P t ↔ a⋅(b - c) = a⋅b + t.
11. ⊢ a⋅b - a⋅c = a⋅b + -(a⋅c), rsub_eq.
12. ⊢ a⋅b + -(a⋅c) = a⋅b - a⋅c, eq_symm 11.
13. 1, 2, 3 ⊢ a⋅(b - c) = a⋅b - a⋅c, eq_trans 10 12.
rmul_distl_sub. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a⋅(b - c) = a⋅b - a⋅c, subj_intro_iii 13.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 1, 2 ⊢ a - b ∈ ℝ, rsub_closed 1 2.
05. 1, 2, 3 ⊢ (a - b)⋅c = c⋅(a - b), rmul_comm 4 3.
06. 1, 2, 3 ⊢ c⋅(a - b) = c⋅a - c⋅b, rmul_distl_sub 3 1 2.
07. 1, 3 ⊢ c⋅a = a⋅c, rmul_comm 3 1.
08. 2, 3 ⊢ c⋅b = b⋅c, rmul_comm 3 2.
09. 1, 3 ⊢ c⋅a - c⋅b = a⋅c - c⋅b, f_equal 7, f t = t - c⋅b.
10. 1, 2, 3 ⊢ c⋅a - c⋅b = a⋅c - b⋅c, eq_subst 8 9,
  P t ↔ c⋅a - c⋅b = a⋅c - t.
11. 1, 2, 3 ⊢ (a - b)⋅c = c⋅a - c⋅b, eq_trans 5 6.
12. 1, 2, 3 ⊢ (a - b)⋅c = a⋅c - b⋅c, eq_trans 11 10.
rmul_distr_sub. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  (a - b)⋅c = a⋅c - b⋅c, subj_intro_iii 12.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 1 ⊢ a + 0 = a, radd_neutr 1.
03. ⊢ 0 = -0, calc.
04. ⊢ a - 0 = a + -0, rsub_eq.
05. 1 ⊢ a + -0 = a, eq_subst 3 2, P t ↔ a + t = a.
06. 1 ⊢ a - 0 = a, eq_trans 4 5.
rsub_zero. ⊢ a ∈ ℝ → a - 0 = a, subj_intro 6.

01. 1 ⊢ a ∈ ℝ, hypo.
02. ⊢ a - a = a + (-a), rsub_eq.
03. 1 ⊢ a + (-a) = 0, radd_inv 1.
04. 1 ⊢ a - a = 0, eq_trans 2 3.
rsub_self. ⊢ a ∈ ℝ → a - a = 0, subj_intro 4.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 1 ⊢ -a ∈ ℝ, rneg_closed 1.
03. ⊢ 0 - a = 0 + (-a), rsub_eq.
04. 1 ⊢ 0 + (-a) = -a, radd_neutl 2.
05. 1 ⊢ 0 - a = -a, eq_trans 3 4.
rsub_from_zero. ⊢ a ∈ ℝ → 0 - a = -a, subj_intro 5.

01. 1 ⊢ x ∈ ℝ, hypo.
02. 1 ⊢ -x ∈ ℝ, rneg_closed 1.
03. 1 ⊢ -(-x) ∈ ℝ, rneg_closed 2.
04. 1 ⊢ -x + -(-x) = 0, radd_inv 2.
05. 1 ⊢ -(-x) + -x = -x + -(-x), radd_comm 3 2.
06. 1 ⊢ -(-x) + -x = 0, eq_trans 5 4.
07. 1 ⊢ -(-x) + -x + x = 0 + x, f_equal 6, f t = t + x.
08. 1 ⊢ -(-x) + -x + x = -(-x) + (-x + x), radd_assoc 3 2 1.
09. 1 ⊢ -x + x = x + -x, radd_comm 2 1.
10. 1 ⊢ x + -x = 0, radd_inv 1.
11. 1 ⊢ -x + x = 0, eq_trans 9 10.
12. 1 ⊢ -(-x) + (-x + x) = -(-x) + 0, f_equal 11, f t = -(-x) + t.
13. 1 ⊢ -(-x) + 0 = -(-x), radd_neutr 3.
14. 1 ⊢ -(-x) + (-x + x) = -(-x), eq_trans 12 13.
15. 1 ⊢ -(-x) + -x + x = -(-x), eq_trans 8 14.
16. 1 ⊢ -(-x) = 0 + x, eq_trans_ll 15 7.
17. 1 ⊢ 0 + x = x, radd_neutl 1.
18. 1 ⊢ -(-x) = x, eq_trans 16 17.
rneg_involution. ⊢ x ∈ ℝ → -(-x) = x, subj_intro 18.

01. 1 ⊢ x ∈ ℝ, hypo.
02. ⊢ 1 ∈ ℝ, calc.
03. ⊢ -1 ∈ ℝ, rneg_closed 2.
04. ⊢ -1 + 1 = 0, calc.
05. ⊢ (-1 + 1)⋅x = 0⋅x, f_equal 4, f t = t⋅x.
06. 1 ⊢ (-1 + 1)⋅x = (-1)⋅x + 1⋅x, rmul_distr_add 3 2 1.
07. 1 ⊢ (-1)⋅x + 1⋅x = 0⋅x, eq_trans_ll 6 5.
08. 1 ⊢ 1⋅x = x, rmul_neutl 1.
09. 1 ⊢ (-1)⋅x + x = 0⋅x, eq_subst 8 7, P t ↔ (-1)⋅x + t = 0⋅x.
10. 1 ⊢ 0⋅x = 0, rmul_lzero 1.
11. 1 ⊢ (-1)⋅x + x = 0, eq_trans 9 10.
12. 1 ⊢ (-1)⋅x + x - x = 0 - x, f_equal 11, f t = t - x.
13. 1 ⊢ (-1)⋅x ∈ ℝ, rmul_closed 3 1.
14. 1 ⊢ (-1)⋅x + x - x = (-1)⋅x, radd_cancel 13 1.
15. 1 ⊢ (-1)⋅x = 0 - x, eq_trans_ll 14 12.
16. 1 ⊢ 0 - x = -x, rsub_from_zero 1.
17. 1 ⊢ (-1)⋅x = -x, eq_trans 15 16.
rmul_minus_one. ⊢ x ∈ ℝ → (-1)⋅x = -x, subj_intro 17.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 1, 2 ⊢ -(a⋅b) = (-a)⋅b, rmul_compatl_neg 1 2.
04. 1, 2 ⊢ -(-(a⋅b)) = -((-a)⋅b), f_equal 3, f t = -t.
05. 1 ⊢ -a ∈ ℝ, rneg_closed 1.
06. 1, 2 ⊢ -((-a)⋅b) = (-a)⋅(-b), rmul_compatr_neg 5 2.
07. 1, 2 ⊢ -(-(a⋅b)) = (-a)⋅(-b), eq_trans 4 6.
08. 1, 2 ⊢ a⋅b ∈ ℝ, rmul_closed 1 2.
09. 1, 2 ⊢ -(-(a⋅b)) = a⋅b, rneg_involution 8.
10. 1, 2 ⊢ (-a)⋅(-b) = -(-(a⋅b)), eq_symm 7.
11. 1, 2 ⊢ (-a)⋅(-b) = a⋅b, eq_trans 10 9.
rmul_cancel_neg. ⊢ a ∈ ℝ → b ∈ ℝ →
  (-a)⋅(-b) = a⋅b, subj_intro_ii 11.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 1, 2 ⊢ a + b ∈ ℝ, radd_closed 1 2.
04. 1 ⊢ (-1)⋅a = -a, rmul_minus_one 1.
05. 2 ⊢ (-1)⋅b = -b, rmul_minus_one 2.
06. 1, 2 ⊢ (-1)⋅(a + b) = -(a + b), rmul_minus_one 3.
07. 1, 2 ⊢ -(a + b) = (-1)⋅(a + b), eq_symm 6.
08. ⊢ -1 ∈ ℝ, calc.
09. 1, 2 ⊢ (-1)⋅(a + b) = (-1)⋅a + (-1)⋅b,
  rmul_distl_add 8 1 2.
10. 1, 2 ⊢ -(a + b) = (-1)⋅a + (-1)⋅b, eq_trans 7 9.
11. 1, 2 ⊢ -(a + b) = -a + (-1)⋅b,
  eq_subst 4 10, P t ↔ -(a + b) = t + (-1)⋅b.
12. 1, 2 ⊢ -(a + b) = -a + -b,
  eq_subst 5 11, P t ↔ -(a + b) = -a + t.
rneg_dist_add. ⊢ a ∈ ℝ → b ∈ ℝ → -(a + b) = -a + -b,
  subj_intro_ii 12.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. ⊢ a - b = a + -b, rsub_eq.
04. ⊢ -(a - b) = -(a + -b), f_equal 3, f t = -t.
05. 2 ⊢ -b ∈ ℝ, rneg_closed 2.
06. 1, 2 ⊢ -(a + -b) = -a + -(-b), rneg_dist_add 1 5.
07. 1, 2 ⊢ -(a - b) = -a + -(-b), eq_trans 4 6.
08. 2 ⊢ -(-b) = b, rneg_involution 2.
09. 1, 2 ⊢ -(a - b) = -a + b,
  eq_subst 8 7, P t ↔ -(a - b) = -a + t.
10. 1 ⊢ -a ∈ ℝ, rneg_closed 1.
11. 1, 2 ⊢ -a + b = b + -a, radd_comm 10 2.
12. ⊢ b - a = b + -a, rsub_eq.
13. 1, 2 ⊢ -a + b = b - a, eq_trans_rr 11 12.
14. 1, 2 ⊢ -(a - b) = b - a, eq_trans 9 13.
rsub_neg. ⊢ a ∈ ℝ → b ∈ ℝ → -(a - b) = b - a,
  subj_intro_ii 14.


(*/section Useful lemmata *)

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ d ∈ ℝ, hypo.
05. 1, 2 ⊢ a + b ∈ ℝ, radd_closed 1 2.
06. 1, 2, 3, 4 ⊢ (a + b)⋅(c + d) = (a + b)⋅c + (a + b)⋅d,
  rmul_distl_add 5 3 4.
07. 1, 2, 3 ⊢ (a + b)⋅c = a⋅c + b⋅c, rmul_distr_add 1 2 3.
08. 1, 2, 4 ⊢ (a + b)⋅d = a⋅d + b⋅d, rmul_distr_add 1 2 4.
09. 1, 2, 3, 4 ⊢ (a + b)⋅c + (a + b)⋅d =
  a⋅c + b⋅c + (a⋅d + b⋅d), f_equal_ii 7 8, f x y = x + y.
10. 1, 2, 3, 4 ⊢ (a + b)⋅(c + d) = a⋅c + b⋅c + (a⋅d + b⋅d),
  eq_trans 6 9.
11. 1, 3 ⊢ a⋅c ∈ ℝ, rmul_closed 1 3.
12. 2, 3 ⊢ b⋅c ∈ ℝ, rmul_closed 2 3.
13. 1, 4 ⊢ a⋅d ∈ ℝ, rmul_closed 1 4.
14. 2, 4 ⊢ b⋅d ∈ ℝ, rmul_closed 2 4.
15. 1, 2, 3 ⊢ a⋅c + b⋅c ∈ ℝ, radd_closed 11 12.
16. 1, 2, 3, 4 ⊢ a⋅c + b⋅c + a⋅d + b⋅d = a⋅c + b⋅c + (a⋅d + b⋅d),
  radd_assoc 15 13 14.
17. 1, 2, 3, 4 ⊢ (a + b)⋅(c + d) = a⋅c + b⋅c + a⋅d + b⋅d,
  eq_trans_rr 10 16.
rmul_expand_add_add. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ → d ∈ ℝ →
  (a + b)⋅(c + d) = a⋅c + b⋅c + a⋅d + b⋅d, subj_intro_iv 17.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 1, 2, 3 ⊢ a + b + c = a + (b + c), radd_assoc 1 2 3.
05. 1, 2, 3 ⊢ a + b + c + d = a + (b + c) + d,
  f_equal 4, f t = t + d.
radd_assoc_llloolo. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a + b + c + d = a + (b + c) + d, subj_intro_iii 5.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ d ∈ ℝ, hypo.
05. 1, 2, 3 ⊢ a + b + c = a + (b + c), radd_assoc 1 2 3.
06. 2, 3 ⊢ b + c ∈ ℝ, radd_closed 2 3.
07. 1, 2, 3, 4 ⊢ a + (b + c) + d = a + (b + c + d),
  radd_assoc 1 6 4.
08. 1, 2, 3, 4 ⊢ a + b + c + d = a + (b + c + d),
  eq_subst_rev 5 7, P t ↔ t + d = a + (b + c + d).
radd_assoc_llloloo. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ → d ∈ ℝ →
  a + b + c + d = a + (b + c + d), subj_intro_iv 8.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ d ∈ ℝ, hypo.
05. 1, 2, 3, 4 ⊢ a + b + c + d = a + (b + c + d),
  radd_assoc_llloloo 1 2 3 4.
06. 2, 3, 4 ⊢ b + c + d = b + (c + d), radd_assoc 2 3 4.
07. 1, 2, 3, 4 ⊢ a + b + c + d = a + (b + (c + d)),
  eq_subst 6 5, P t ↔ a + b + c + d = a + t.
radd_assoc_llllooo. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ → d ∈ ℝ →
  a + b + c + d = a + (b + (c + d)), subj_intro_iv 7.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ d ∈ ℝ, hypo.
05. 3, 4 ⊢ c + d ∈ ℝ, radd_closed 3 4.
06. 1, 2, 3, 4 ⊢ a + b + (c + d) = a + (b + (c + d)),
  radd_assoc 1 2 5.
07. 1, 2, 3, 4 ⊢ a + b + c + d = a + (b + (c + d)),
  radd_assoc_llllooo 1 2 3 4.
08. 1, 2, 3, 4 ⊢ a + b + c + d = a + b + (c + d),
  eq_trans_rr 7 6.
radd_assoc_llolloo. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ → d ∈ ℝ →
  a + b + c + d = (a + b) + (c + d), subj_intro_iv 8.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 1, 2 ⊢ a + b = b + a, radd_comm 1 2.
04. 1, 2 ⊢ a + b + c = b + a + c, f_equal 3, f t = t + c.
radd_perm_213. ⊢ a ∈ ℝ → b ∈ ℝ → a + b + c = b + a + c,
  subj_intro_ii 4.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 2, 3 ⊢ b + c = c + b, radd_comm 2 3.
05. 2, 3 ⊢ a + (b + c) = a + (c + b), f_equal 4, f t = a + t.
06. 1, 2, 3 ⊢ a + b + c = a + (b + c), radd_assoc 1 2 3.
07. 1, 2, 3 ⊢ a + c + b = a + (c + b), radd_assoc 1 3 2.
08. 1, 2, 3 ⊢ a + b + c = a + (c + b), eq_trans 6 5.
09. 1, 2, 3 ⊢ a + b + c = a + c + b, eq_trans_rr 8 7.
radd_perm_132. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a + b + c = a + c + b, subj_intro_iii 9.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 1, 2 ⊢ a + b + c = b + a + c, radd_perm_213 1 2.
05. 1, 2, 3 ⊢ b + a + c = b + c + a, radd_perm_132 2 1 3.
06. 1, 2, 3 ⊢ a + b + c = b + c + a, eq_trans 4 5.
radd_perm_231. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a + b + c = b + c + a, subj_intro_iii 6.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 1, 2, 3 ⊢ a + b + c = a + c + b, radd_perm_132 1 2 3.
05. 1, 3 ⊢ a + c + b = c + a + b, radd_perm_213 1 3.
06. 1, 2, 3 ⊢ a + b + c = c + a + b, eq_trans 4 5.
radd_perm_312. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a + b + c = c + a + b, subj_intro_iii 6.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 1, 2, 3 ⊢ a + b + c = c + a + b, radd_perm_312 1 2 3.
05. 1, 2, 3 ⊢ c + a + b = c + b + a, radd_perm_132 3 1 2.
06. 1, 2, 3 ⊢ a + b + c = c + b + a, eq_trans 4 5.
radd_perm_321. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a + b + c = c + b + a, subj_intro_iii 6.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ d ∈ ℝ, hypo.
05. 1, 2, 3, 4 ⊢ a + b + c + d = a + (b + c + d),
  radd_assoc_llloloo 1 2 3 4.
06. 2, 3, 4 ⊢ b + c + d = d + b + c,
  radd_perm_312 2 3 4.
07. 1, 2, 3, 4 ⊢ a + b + c + d = a + (d + b + c),
  eq_subst 6 5, P t ↔ a + b + c + d = a + t.
08. 1, 2, 3, 4 ⊢ a + d + b + c = a + (d + b + c),
  radd_assoc_llloloo 1 4 2 3.
09. 1, 2, 3, 4 ⊢ a + b + c + d = a + d + b + c,
  eq_trans_rr 7 8.
radd_perm_1423. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ → d ∈ ℝ →
  a + b + c + d = a + d + b + c, subj_intro_iv 9.


(*/section Basic inequalities *)

01. 1 ⊢ a ≤ b, hypo.
02. 2 ⊢ b = c, hypo.
03. 1, 2 ⊢ a ≤ c, eq_subst 2 1, P t ↔ a ≤ t.
le_eq_trans. ⊢ a ≤ b → b = c → a ≤ c, subj_intro_ii 3.

01. 1 ⊢ a = b, hypo.
02. 2 ⊢ b ≤ c, hypo.
03. 1, 2 ⊢ a ≤ c, eq_subst_rev 1 2, P t ↔ t ≤ c.
eq_le_trans. ⊢ a = b → b ≤ c → a ≤ c, subj_intro_ii 3.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ ¬a ≤ b, hypo.
04. 1, 2 ⊢ a ≤ b ∨ b ≤ a, rle_total 1 2.
05. 1, 2, 3 ⊢ b ≤ a, tollendo_ponens_right 4 3.
rle_neg. ⊢ a ∈ ℝ → b ∈ ℝ → ¬a ≤ b → b ≤ a,
  subj_intro_iii 5.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ a ≤ b, hypo.
05. 1, 2, 3, 4 ⊢ a + c ≤ b + c, rle_compat_add 1 2 3 4.
06. 1, 3 ⊢ a + c = c + a, radd_comm 1 3.
07. 2, 3 ⊢ b + c = c + b, radd_comm 2 3.
08. 1, 2, 3, 4 ⊢ c + a ≤ b + c, eq_subst 6 5, P t ↔ t ≤ b + c.
09. 1, 2, 3, 4 ⊢ c + a ≤ c + b, eq_subst 7 8, P t ↔ c + a ≤ t.
rle_compat_addl. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a ≤ b → c + a ≤ c + b, subj_intro_iv 9.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ c ∈ ℝ, hypo.
04. 4 ⊢ a ≤ b, hypo.
05. 3 ⊢ -c ∈ ℝ, rneg_closed 3.
06. 1, 2, 3, 4 ⊢ a + -c ≤ b + -c,
  rle_compat_add 1 2 5 4.
07. ⊢ a - c = a + -c, rsub_eq.
08. ⊢ b - c = b + -c, rsub_eq.
09. 1, 2, 3, 4 ⊢ a - c ≤ b + -c,
  eq_subst_rev 7 6, P t ↔ t ≤ b + -c.
10. 1, 2, 3, 4 ⊢ a - c ≤ b - c,
  eq_subst_rev 8 9, P t ↔ a - c ≤ t.
rle_compat_sub. ⊢ a ∈ ℝ → b ∈ ℝ → c ∈ ℝ →
  a ≤ b → a - c ≤ b - c, subj_intro_iv 10.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ a' ∈ ℝ, hypo.
04. 4 ⊢ b' ∈ ℝ, hypo.
05. 5 ⊢ a ≤ a', hypo.
06. 6 ⊢ b ≤ b', hypo.
07. 1, 2, 3, 5 ⊢ a + b ≤ a' + b, rle_compat_add 1 3 2 5.
08. 2, 3, 4, 6 ⊢ a' + b ≤ a' + b', rle_compat_addl 2 4 3 6.
09. 1, 2 ⊢ a + b ∈ ℝ, radd_closed 1 2.
10. 2, 3 ⊢ a' + b ∈ ℝ, radd_closed 3 2.
11. 3, 4 ⊢ a' + b' ∈ ℝ, radd_closed 3 4.
12. 1, 2, 3, 4, 5, 6 ⊢ a + b ≤ a' + b', rle_trans 9 10 11 7 8.
13. 1, 2, 3, 4 ⊢ a ≤ a' → b ≤ b' → a + b ≤ a' + b', subj_intro_ii 12.
rle_add. ⊢ a ∈ ℝ → b ∈ ℝ → a' ∈ ℝ → b' ∈ ℝ →
  a ≤ a' → b ≤ b' → a + b ≤ a' + b', subj_intro_iv 13.

01. 1 ⊢ x ∈ ℝ, hypo.
02. 2 ⊢ 0 ≤ x, hypo.
03. ⊢ 0 ∈ ℝ, calc.
04. 1, 2 ⊢ 0 - x ≤ x - x, rle_compat_sub 3 1 1 2.
05. 1 ⊢ 0 - x = -x, rsub_from_zero 1.
06. 1, 2 ⊢ -x ≤ x - x, eq_subst 5 4, P t ↔ t ≤ x - x.
07. ⊢ x - x = x + -x, rsub_eq.
08. 1 ⊢ x + -x = 0, radd_inv 1.
09. 1 ⊢ x - x = 0, eq_trans 7 8.
10. 1, 2 ⊢ -x ≤ 0, le_eq_trans 6 9.
rneg_non_negative. ⊢ x ∈ ℝ → 0 ≤ x → -x ≤ 0,
  subj_intro_ii 10.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ a ≤ b, hypo.
04. 1, 2, 3 ⊢ a - a ≤ b - a, rle_compat_sub 1 2 1 3.
05. 1 ⊢ a - a = 0, rsub_self 1.
06. 1, 2, 3 ⊢ 0 ≤ b - a, eq_subst 5 4, P t ↔ t ≤ b - a.
07. ⊢ 0 ∈ ℝ, calc.
08. 1, 2 ⊢ b - a ∈ ℝ, rsub_closed 2 1.
09. 1, 2, 3 ⊢ 0 - b ≤ (b - a) - b, rle_compat_sub 7 8 2 6.
10. ⊢ b - a = b + -a, rsub_eq.
11. 1 ⊢ -a ∈ ℝ, rneg_closed 1.
12. 1, 2 ⊢ b + -a = -a + b, radd_comm 2 11.
13. 1, 2 ⊢ b - a = -a + b, eq_trans 10 12.
14. 1, 2 ⊢ (b - a) - b = (-a + b) - b, f_equal 13, f t = t - b.
15. 1, 2 ⊢ (-a + b) - b = -a, radd_cancel 11 2.
16. 1, 2 ⊢ (b - a) - b = -a, eq_trans 14 15.
17. 1, 2, 3 ⊢ 0 - b ≤ -a, le_eq_trans 9 16.
18. 2 ⊢ 0 - b = -b, rsub_from_zero 2.
19. 1, 2, 3 ⊢ -b ≤ -a, eq_subst 18 17, P t ↔ t ≤ -a.
rle_neg_swaps. ⊢ a ∈ ℝ → b ∈ ℝ → a ≤ b → -b ≤ -a,
  subj_intro_iii 19.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ 0 ≤ a, hypo.
04. 4 ⊢ b ≤ 0, hypo.
05. ⊢ 0 ∈ ℝ, calc.
06. 2, 4 ⊢ -0 ≤ -b, rle_neg_swaps 2 5 4.
07. ⊢ 0 = -0, calc.
08. 2, 4 ⊢ 0 ≤ -b, eq_le_trans 7 6.
09. 2 ⊢ -b ∈ ℝ, rneg_closed 2.
10. 1, 2, 3, 4 ⊢ 0 ≤ a⋅(-b), rle_compat_mul 1 9 3 8.
11. 1, 2 ⊢ -(a⋅b) = a⋅(-b), rmul_compatr_neg 1 2.
12. 1, 2 ⊢ a⋅(-b) = -(a⋅b), eq_symm 11.
13. 1, 2, 3, 4 ⊢ 0 ≤ -(a⋅b), le_eq_trans 10 12.
14. 1, 2 ⊢ a⋅b ∈ ℝ, rmul_closed 1 2.
15. 1, 2 ⊢ -(a⋅b) ∈ ℝ, rneg_closed 14.
16. 1, 2, 3, 4 ⊢ -(-(a⋅b)) ≤ 0, rneg_non_negative 15 13.
17. 1, 2 ⊢ -(-(a⋅b)) = a⋅b, rneg_involution 14.
18. 1, 2 ⊢ a⋅b = -(-(a⋅b)), eq_symm 17.
19. 1, 2, 3, 4 ⊢ a⋅b ≤ 0, eq_le_trans 18 16.
rmul_nn_np. ⊢ a ∈ ℝ → b ∈ ℝ →
  0 ≤ a → b ≤ 0 → a⋅b ≤ 0, subj_intro_iv 19.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ a ≤ 0, hypo.
04. 4 ⊢ 0 ≤ b, hypo.
05. 1, 2, 3, 4 ⊢ b⋅a ≤ 0, rmul_nn_np 2 1 4 3.
06. 1, 2 ⊢ a⋅b = b⋅a, rmul_comm 1 2.
07. 1, 2, 3, 4 ⊢ a⋅b ≤ 0, eq_le_trans 6 5.
rmul_np_nn. ⊢ a ∈ ℝ → b ∈ ℝ →
  a ≤ 0 → 0 ≤ b → a⋅b ≤ 0, subj_intro_iv 7.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ b ∈ ℝ, hypo.
03. 3 ⊢ a ≤ 0, hypo.
04. 4 ⊢ b ≤ 0, hypo.
05. ⊢ 0 ∈ ℝ, calc.
06. ⊢ 0 = -0, calc.
07. 1, 3 ⊢ -0 ≤ -a, rle_neg_swaps 1 5 3.
08. 2, 4 ⊢ -0 ≤ -b, rle_neg_swaps 2 5 4.
09. 1, 3 ⊢ 0 ≤ -a, eq_le_trans 6 7.
10. 2, 4 ⊢ 0 ≤ -b, eq_le_trans 6 8.
11. 1 ⊢ -a ∈ ℝ, rneg_closed 1.
12. 2 ⊢ -b ∈ ℝ, rneg_closed 2.
13. 1, 2, 3, 4 ⊢ 0 ≤ (-a)⋅(-b), rle_compat_mul 11 12 9 10.
14. 1, 2 ⊢ -(a⋅b) = a⋅(-b), rmul_compatr_neg 1 2.
15. 1, 2 ⊢ -(-(a⋅b)) = -(a⋅(-b)), f_equal 14, f t = -t.
16. 1, 2 ⊢ a⋅b ∈ ℝ, rmul_closed 1 2.
17. 1, 2 ⊢ -(-(a⋅b)) = a⋅b, rneg_involution 16.
18. 1, 2 ⊢ -(a⋅(-b)) = a⋅b, eq_trans_ll 15 17.
19. 1, 2 ⊢ -(a⋅(-b)) = (-a)⋅(-b), rmul_compatl_neg 1 12.
20. 1, 2 ⊢ (-a)⋅(-b) = a⋅b, eq_trans_ll 19 18.
21. 1, 2, 3, 4 ⊢ 0 ≤ a⋅b, le_eq_trans 13 20.
rmul_np_np. ⊢ a ∈ ℝ → b ∈ ℝ →
  a ≤ 0 → b ≤ 0 → 0 ≤ a⋅b, subj_intro_iv 21.


(*/section Absolute value *)

abs_eq. ⊢ abs x = if (0 ≤ x) x (-x), def.

01. 1 ⊢ x ∈ ℝ, hypo.
02. 2 ⊢ 0 ≤ x, hypo.
03. 1 ⊢ set x, set_intro 1.
04. 1, 2 ⊢ if (0 ≤ x) x (-x) = x, cond_eql 3 2.
05. ⊢ abs x = if (0 ≤ x) x (-x), abs_eq.
06. 1, 2 ⊢ abs x = x, eq_trans 5 4.
rabs_eql. ⊢ x ∈ ℝ → 0 ≤ x → abs x = x, subj_intro_ii 6.

01. 1 ⊢ x ∈ ℝ, hypo.
02. 2 ⊢ ¬0 ≤ x, hypo.
03. 1 ⊢ -x ∈ ℝ, rneg_closed 1.
04. 1 ⊢ set (-x), set_intro 3.
05. 1, 2 ⊢ if (0 ≤ x) x (-x) = -x, cond_eqr 4 2.
06. ⊢ abs x = if (0 ≤ x) x (-x), abs_eq.
07. 1, 2 ⊢ abs x = -x, eq_trans 6 5.
rabs_eqr. ⊢ x ∈ ℝ → ¬0 ≤ x → abs x = -x, subj_intro_ii 7.

01. 1 ⊢ x ∈ ℝ, hypo.
02. 2 ⊢ x ≤ 0, hypo.
03. ⊢ 0 ∈ ℝ, calc.
04. ⊢ 0 ≤ x ∨ ¬0 ≤ x, lem.
05. 5 ⊢ 0 ≤ x, hypo.
06. 1, 2, 5 ⊢ x = 0, rle_antisym 1 3 2 5.
07. ⊢ 0 ≤ 0, rle_refl 3.
08. ⊢ abs 0 = 0, rabs_eql 3 7.
09. ⊢ -0 = 0, calc.
10. 1, 2, 5 ⊢ -x = -0, f_equal 6, f t = -t.
11. 1, 2, 5 ⊢ -x = 0, eq_trans 10 9.
12. 1, 2, 5 ⊢ abs x = 0, eq_subst_rev 6 8, P t ↔ abs t = 0.
13. 1, 2, 5 ⊢ abs x = -x, eq_trans_rr 12 11.
14. 14 ⊢ ¬0 ≤ x, hypo.
15. 1, 14 ⊢ abs x = -x, rabs_eqr 1 14.
16. 1, 2 ⊢ abs x = -x, disj_elim 4 13 15.
rabs_non_positive. ⊢ x ∈ ℝ → x ≤ 0 → abs x = -x,
  subj_intro_ii 16.

01. 1 ⊢ x ∈ ℝ, hypo.
02. ⊢ 0 ≤ x ∨ ¬0 ≤ x, lem.
03. 3 ⊢ 0 ≤ x, hypo.
04. 1, 3 ⊢ abs x = x, rabs_eql 1 3.
05. 1, 3 ⊢ abs x ∈ ℝ, eq_subst_rev 4 1, P t ↔ t ∈ ℝ.
06. 6 ⊢ ¬0 ≤ x, hypo.
07. 1, 6 ⊢ abs x = -x, rabs_eqr 1 6.
08. 1 ⊢ -x ∈ ℝ, rneg_closed 1.
09. 1, 6 ⊢ abs x ∈ ℝ, eq_subst_rev 7 8, P t ↔ t ∈ ℝ.
10. 1 ⊢ abs x ∈ ℝ, disj_elim 2 5 9.
rabs_closed. ⊢ x ∈ ℝ → abs x ∈ ℝ, subj_intro 10.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ x ∈ ℝ, hypo.
03. 3 ⊢ -a ≤ x, hypo.
04. 4 ⊢ x ≤ a, hypo.
05. ⊢ 0 ≤ x ∨ ¬0 ≤ x, lem.
06. 6 ⊢ 0 ≤ x, hypo.
07. 2, 6 ⊢ abs x = x, rabs_eql 2 6.
08. 2, 4, 6 ⊢ abs x ≤ a, eq_le_trans 7 4.
09. 9 ⊢ ¬0 ≤ x, hypo.
10. 2, 9 ⊢ abs x = -x, rabs_eqr 2 9.
11. 1 ⊢ -a ∈ ℝ, rneg_closed 1.
12. 1, 2, 3 ⊢ -x ≤ -(-a), rle_neg_swaps 11 2 3.
13. 1 ⊢ -(-a) = a, rneg_involution 1.
14. 1, 2, 3 ⊢ -x ≤ a, le_eq_trans 12 13.
15. 1, 2, 3, 9 ⊢ abs x ≤ a, eq_le_trans 10 14.
16. 1, 2, 3, 4 ⊢ abs x ≤ a, disj_elim 5 8 15.
rabs_bounded. ⊢ a ∈ ℝ → x ∈ ℝ → -a ≤ x → x ≤ a →
  abs x ≤ a, subj_intro_iv 16.

01. 1 ⊢ x ∈ ℝ, hypo.
02. ⊢ 0 ≤ x ∨ ¬0 ≤ x, lem.

03. 3 ⊢ 0 ≤ x, hypo.
04. 1 ⊢ set x, set_intro 1.
05. 1, 3 ⊢ if (0 ≤ x) x (-x) = x, cond_eql 4 3.
06. ⊢ abs x = if (0 ≤ x) x (-x), abs_eq.
07. 1, 3 ⊢ abs x = x, eq_trans 6 5.
08. 1 ⊢ x ≤ x, rle_refl 1.
09. 1, 3 ⊢ x ≤ abs x, eq_subst_rev 7 8, P t ↔ x ≤ t.

10. 10 ⊢ ¬0 ≤ x, hypo.
11. 1 ⊢ -x ∈ ℝ, rneg_closed 1.
12. 1 ⊢ set (-x), set_intro 11.
13. 1, 10 ⊢ if (0 ≤ x) x (-x) = -x, cond_eqr 12 10.
14. 1, 10 ⊢ abs x = -x, eq_trans 6 13.
15. ⊢ 0 ∈ ℝ, calc.
16. 1, 10 ⊢ x ≤ 0, rle_neg 15 1 10.
17. 1, 10 ⊢ x + x ≤ 0 + 0, rle_add 1 1 15 15 16 16.
18. ⊢ 0 + 0 = 0, radd_neutr 15.
19. 1, 10 ⊢ x + x ≤ 0, le_eq_trans 17 18.
20. 1 ⊢ x + x ∈ ℝ, radd_closed 1 1.
21. 1, 10 ⊢ x + x - x ≤ 0 - x, rle_compat_sub 20 15 1 19.
22. 1 ⊢ x + x - x = x, radd_cancel 1 1.
23. 1, 10 ⊢ x ≤ 0 - x, eq_subst 22 21, P t ↔ t ≤ 0 - x.
24. 1 ⊢ 0 - x = -x, rsub_from_zero 1.
25. 1, 10 ⊢ x ≤ -x, le_eq_trans 23 24.
26. 1, 10 ⊢ x ≤ abs x, eq_subst_rev 14 25, P t ↔ x ≤ t.

27. 1 ⊢ x ≤ abs x, disj_elim 2 9 26.
rabs_ge_arg. ⊢ x ∈ ℝ → x ≤ abs x, subj_intro 27.

01. 1 ⊢ x ∈ ℝ, hypo.
02. ⊢ 0 ≤ x ∨ ¬0 ≤ x, lem.

03. 3 ⊢ 0 ≤ x, hypo.
04. 1, 3 ⊢ abs x = x, rabs_eql 1 3.
05. 1, 3 ⊢ -x ≤ 0, rneg_non_negative 1 3.
06. ⊢ 0 ∈ ℝ, calc.
07. 1 ⊢ -x ∈ ℝ, rneg_closed 1.
08. 1, 3 ⊢ -x ≤ x, rle_trans 7 6 1 5 3.
09. 1, 3 ⊢ -x ≤ abs x, eq_subst_rev 4 8, P t ↔ -x ≤ t.

10. 10 ⊢ ¬0 ≤ x, hypo.
11. 1, 10 ⊢ abs x = -x, rabs_eqr 1 10.
12. 1 ⊢ -x ≤ -x, rle_refl 7.
13. 1, 10 ⊢ -x ≤ abs x, eq_subst_rev 11 12, P t ↔ -x ≤ t.

14. 1 ⊢ -x ≤ abs x, disj_elim 2 9 13.
rabs_ge_neg_arg. ⊢ x ∈ ℝ → -x ≤ abs x, subj_intro 14.

01. 1 ⊢ x ∈ ℝ, hypo.
02. ⊢ 0 ≤ x ∨ ¬0 ≤ x, lem.

03. 3 ⊢ 0 ≤ x, hypo.
04. 1, 3 ⊢ abs x = x, rabs_eql 1 3.
05. ⊢ 0 ∈ ℝ, calc.
06. 1, 3 ⊢ -x ≤ -0, rle_neg_swaps 5 1 3.
07. ⊢ -0 = 0, calc.
08. 1, 3 ⊢ -x ≤ 0, le_eq_trans 6 7.
09. 1 ⊢ -x ∈ ℝ, rneg_closed 1.
10. 1, 3 ⊢ abs (-x) = -(-x), rabs_non_positive 9 8.
11. 1 ⊢ -(-x) = x, rneg_involution 1.
12. 1, 3 ⊢ abs (-x) = x, eq_trans 10 11.
13. 1, 3 ⊢ abs (-x) = abs x, eq_trans_rr 12 4.

14. 14 ⊢ ¬0 ≤ x, hypo.
15. 1, 14 ⊢ abs x = -x, rabs_eqr 1 14.
16. 1, 14 ⊢ x ≤ 0, rle_neg 5 1 14.
17. 1, 14 ⊢ -0 ≤ -x, rle_neg_swaps 1 5 16.
18. ⊢ 0 = -0, calc.
19. 1, 14 ⊢ 0 ≤ -x, eq_le_trans 18 17.
20. 1, 14 ⊢ abs (-x) = -x, rabs_eql 9 19.
21. 1, 14 ⊢ abs (-x) = abs x, eq_trans_rr 20 15.

22. 1 ⊢ abs (-x) = abs x, disj_elim 2 13 21.
rabs_symm. ⊢ x ∈ ℝ → abs (-x) = abs x, subj_intro 22.

01. 1 ⊢ x ∈ ℝ, hypo.
02. 2 ⊢ y ∈ ℝ, hypo.
03. 1 ⊢ abs x ∈ ℝ, rabs_closed 1.
04. 2 ⊢ abs y ∈ ℝ, rabs_closed 2.
05. 1 ⊢ x ≤ abs x, rabs_ge_arg 1.
06. 2 ⊢ y ≤ abs y, rabs_ge_arg 2.
07. 1, 2 ⊢ x + y ≤ abs x + abs y, rle_add 1 2 3 4 5 6.
09. 1 ⊢ -x ≤ abs x, rabs_ge_neg_arg 1.
10. 2 ⊢ -y ≤ abs y, rabs_ge_neg_arg 2.
11. 1 ⊢ -x ∈ ℝ, rneg_closed 1.
12. 2 ⊢ -y ∈ ℝ, rneg_closed 2.
13. 1 ⊢ -abs x ≤ -(-x), rle_neg_swaps 11 3 9.
14. 2 ⊢ -abs y ≤ -(-y), rle_neg_swaps 12 4 10.
15. 1 ⊢ -(-x) = x, rneg_involution 1.
16. 2 ⊢ -(-y) = y, rneg_involution 2.
17. 1 ⊢ -abs x ≤ x, le_eq_trans 13 15.
18. 2 ⊢ -abs y ≤ y, le_eq_trans 14 16.
19. 1 ⊢ -abs x ∈ ℝ, rneg_closed 3.
20. 2 ⊢ -abs y ∈ ℝ, rneg_closed 4.
21. 1, 2 ⊢ -abs x + -abs y ≤ x + y, rle_add 19 20 1 2 17 18.
22. 1, 2 ⊢ -(abs x + abs y) = -abs x + -abs y, rneg_dist_add 3 4.
23. 1, 2 ⊢ -(abs x + abs y) ≤ x + y, eq_le_trans 22 21.
24. 1, 2 ⊢ abs x + abs y ∈ ℝ, radd_closed 3 4.
25. 1, 2 ⊢ x + y ∈ ℝ, radd_closed 1 2.
26. 1, 2 ⊢ abs (x + y) ≤ abs x + abs y, rabs_bounded 24 25 23 7.
rabs_triangle_ineq. ⊢ x ∈ ℝ → y ∈ ℝ →
  abs (x + y) ≤ abs x + abs y, subj_intro_ii 26.

01. 1 ⊢ x ∈ ℝ, hypo.
02. 2 ⊢ y ∈ ℝ, hypo.
03. ⊢ 0 ≤ x ∨ ¬0 ≤ x, lem.

04. 4 ⊢ 0 ≤ x, hypo.
05. 1, 4 ⊢ abs x = x, rabs_eql 1 4.
06. ⊢ 0 ≤ y ∨ ¬0 ≤ y, lem.
07. 7 ⊢ 0 ≤ y, hypo.
08. 2, 7 ⊢ abs y = y, rabs_eql 2 7.
09. 1, 2, 4, 7 ⊢ 0 ≤ x⋅y, rle_compat_mul 1 2 4 7.
10. 1, 2 ⊢ x⋅y ∈ ℝ, rmul_closed 1 2.
11. 1, 2, 4, 7 ⊢ abs (x⋅y) = x⋅y, rabs_eql 10 9.
12. 1, 2, 4, 7 ⊢ abs (x⋅y) = (abs x)⋅y,
  eq_subst_rev 5 11, P t ↔ abs (x⋅y) = t⋅y.
13. 1, 2, 4, 7 ⊢ abs (x⋅y) = (abs x)⋅(abs y),
  eq_subst_rev 8 12, P t ↔ abs (x⋅y) = (abs x)⋅t.
14. 14 ⊢ ¬0 ≤ y, hypo.
15. 2, 14 ⊢ abs y = -y, rabs_eqr 2 14.
16. ⊢ 0 ∈ ℝ, calc.
17. 2, 14 ⊢ y ≤ 0, rle_neg 16 2 14.
18. 1, 2, 4, 14 ⊢ x⋅y ≤ 0, rmul_nn_np 1 2 4 17.
19. 1, 2, 4, 14 ⊢ abs (x⋅y) = -(x⋅y), rabs_non_positive 10 18.
20. 1, 2 ⊢ -(x⋅y) = x⋅(-y), rmul_compatr_neg 1 2.
21. 1, 2, 4, 14 ⊢ abs (x⋅y) = x⋅(-y), eq_trans 19 20.
22. 1, 2, 4, 14 ⊢ abs (x⋅y) = (abs x)⋅(-y),
  eq_subst_rev 5 21, P t ↔ abs (x⋅y) = t⋅(-y).
23. 1, 2, 4, 14 ⊢ abs (x⋅y) = (abs x)⋅(abs y),
  eq_subst_rev 15 22, P t ↔ abs (x⋅y) = (abs x)⋅t.
24. 1, 2, 4 ⊢ abs (x⋅y) = (abs x)⋅(abs y), disj_elim 6 13 23.

25. 25 ⊢ ¬0 ≤ x, hypo.
26. 1, 25 ⊢ x ≤ 0, rle_neg 16 1 25.
27. 1, 25 ⊢ abs x = -x, rabs_non_positive 1 26.
28. ⊢ 0 ≤ y ∨ ¬0 ≤ y, lem.
29. 29 ⊢ 0 ≤ y, hypo.
30. 2, 29 ⊢ abs y = y, rabs_eql 2 29.
31. 1, 2, 25, 29 ⊢ x⋅y ≤ 0, rmul_np_nn 1 2 26 29.
32. 1, 2, 25, 29 ⊢ abs (x⋅y) = -(x⋅y), rabs_non_positive 10 31.
33. 1, 2 ⊢ -(x⋅y) = (-x)⋅y, rmul_compatl_neg 1 2.
34. 1, 2, 25, 29 ⊢ abs (x⋅y) = (-x)⋅y, eq_trans 32 33.
35. 1, 2, 25, 29 ⊢ abs (x⋅y) = (abs x)⋅y,
  eq_subst_rev 27 34, P t ↔ abs (x⋅y) = t⋅y.
36. 1, 2, 25, 29 ⊢ abs (x⋅y) = (abs x)⋅(abs y),
  eq_subst_rev 30 35, P t ↔ abs (x⋅y) = (abs x)⋅t.
37. 37 ⊢ ¬0 ≤ y, hypo.
38. 2, 37 ⊢ abs y = -y, rabs_eqr 2 37.
39. 2, 37 ⊢ y ≤ 0, rle_neg 16 2 37.
40. 1, 2, 25, 37 ⊢ 0 ≤ x⋅y, rmul_np_np 1 2 26 39.
41. 1, 2, 25, 37 ⊢ abs (x⋅y) = x⋅y, rabs_eql 10 40.
42. 1, 2 ⊢ (-x)⋅(-y) = x⋅y, rmul_cancel_neg 1 2.
43. 1, 2 ⊢ x⋅y = (-x)⋅(-y), eq_symm 42.
44. 1, 2, 25, 37 ⊢ abs (x⋅y) = (-x)⋅(-y), eq_trans 41 43.
45. 1, 2, 25, 37 ⊢ abs (x⋅y) = (abs x)⋅(-y),
  eq_subst_rev 27 44, P t ↔ abs (x⋅y) = t⋅(-y).
46. 1, 2, 25, 37 ⊢ abs (x⋅y) = (abs x)⋅(abs y),
  eq_subst_rev 38 45, P t ↔ abs (x⋅y) = (abs x)⋅t.
47. 1, 2, 25 ⊢ abs (x⋅y) = (abs x)⋅(abs y), disj_elim 28 36 46.

48. 1, 2 ⊢ abs (x⋅y) = (abs x)⋅(abs y), disj_elim 3 24 47.
rabs_dist_mul. ⊢ x ∈ ℝ → y ∈ ℝ →
  abs (x⋅y) = (abs x)⋅(abs y), subj_intro_ii 48.

(*/note abs_eq
The <i>absolute value</i> of a real number x, defined as<br>
\_\_|x| := [[cond_eq|if]] x ≥ 0 then x else -x.<br>
*)

(*/note rabs_bounded
From -a ≤ x ≤ a it follows that |x| ≤ a. *)

(*/note rabs_triangle_ineq
The "triangle inequality" for [[abs_eq|absolute values]].<br>
<br>
<b>Proof sketch</b><br>
In general, we have x ≤ |x| and y ≤ |y|, thus x\_+\_y ≤ |x|\_+\_|y|.
Furthermore, in general, we have -x ≤ |x| and -y ≤ |y|, thus -|x| ≤ x
and -|y| ≤ y, and therefore<br>
\_\_-(|x| + |y|) ≤ x + y.<br>
Thus |x + y| ≤ |x| + |y| by [[rabs_bounded]]. q.e.d. *)
