
# == Production rules in EBNF ==
# atom = number | "(" expression ")";
# power = atom ["^" negation];
# negation = power | "-" negation;
# multiplication = negation {("*" | "/") negation};
# addition = multiplication {("+" | "-") multiplication};
# expression = addition;

test_table = [
("001", "1", 1),
("002", "1 + 2", ("+", 1, 2)),
("003", "1 + 2 + 3", ("+", ("+", 1, 2), 3)),
("004", "1 + 2 + 3 + 4", ("+", ("+", ("+", 1, 2), 3), 4)),
("005", "1 - 2", ("-", 1, 2)),
("006", "1 - 2 - 3", ("-", ("-", 1, 2), 3)),
("007", "1 - 2 - 3 - 4", ("-", ("-", ("-", 1, 2), 3), 4)),
("008", "1*2", ("*", 1, 2)),
("009", "1*2*3", ("*", ("*", 1, 2), 3)),
("010", "1*2*3*4", ("*", ("*", ("*", 1, 2), 3), 4)),
("011", "1/2", ("/", 1, 2)),
("012", "1/2/3", ("/", ("/", 1, 2), 3)),
("013", "1/2/3/4", ("/", ("/", ("/", 1, 2), 3), 4)),
("014", "1^2", ("^", 1, 2)),
("015", "1^2^3", ("^", 1, ("^", 2, 3))),
("016", "1^2^3^4", ("^", 1, ("^", 2, ("^", 3, 4)))),
("017", "-1", ("~", 1)),
("018", "--1", ("~", ("~", 1))),
("019", "---1", ("~", ("~", ("~", 1)))),
("020", "----1", ("~", ("~", ("~", ("~", 1))))),
("021", "1*2 + 3", ("+", ("*", 1, 2), 3)),
("022", "1 + 2*3", ("+", 1, ("*", 2, 3))),
("023", "1 + 2*3 + 4", ("+", ("+", 1, ("*", 2, 3)), 4)),
("024", "1*2 + 3*4", ("+", ("*", 1, 2), ("*", 3, 4))),
("025", "1*(2 + 3)", ("*", 1, ("+", 2, 3))),
("026", "(1 + 2)*3", ("*", ("+", 1, 2), 3)),
("027", "(1 + 2)*(3 + 4)", ("*", ("+", 1, 2), ("+", 3, 4))),
("028", "1*(2 + 3)*4", ("*", ("*", 1, ("+", 2, 3)), 4)),
("029", "(1*2) + 3", ("+", ("*", 1, 2), 3)),
("030", "1 + (2*3)", ("+", 1, ("*", 2, 3))),
("031", "1 + (2*3) + 4", ("+", ("+", 1, ("*", 2, 3)), 4)),
("032", "(1*2) + (3*4)", ("+", ("*", 1, 2), ("*", 3, 4))),
("033", "1 + (2 + 3)", ("+", 1, ("+", 2, 3))),
("034", "1 + (2 + (3 + 4))", ("+", 1, ("+", 2, ("+", 3, 4)))),
("035", "(1 + 2) + 3", ("+", ("+", 1, 2), 3)),
("036", "((1 + 2) + 3) + 4", ("+", ("+", ("+", 1, 2), 3), 4)),
("037", "(1 + 2)", ("+", 1, 2)),
("038", "((1 + 2))", ("+", 1, 2)),
("039", "(((1 + 2)))", ("+", 1, 2)),
("040", "((((1 + 2))))", ("+", 1, 2)),
("041", "(1 - 2)", ("-", 1, 2)),
("042", "((1 - 2))", ("-", 1, 2)),
("043", "(((1 - 2)))", ("-", 1, 2)),
("044", "((((1 - 2))))", ("-", 1, 2)),
("045", "(1*2)", ("*", 1, 2)),
("046", "((1*2))", ("*", 1, 2)),
("047", "(((1*2)))", ("*", 1, 2)),
("048", "((((1*2))))", ("*", 1, 2)),
("049", "(1/2)", ("/", 1, 2)),
("050", "((1/2))", ("/", 1, 2)),
("051", "(((1/2)))", ("/", 1, 2)),
("052", "((((1/2))))", ("/", 1, 2)),
("053", "(1^2)", ("^", 1, 2)),
("054", "((1^2))", ("^", 1, 2)),
("055", "(((1^2)))", ("^", 1, 2)),
("056", "((((1^2))))", ("^", 1, 2)),
("057", "(-1)", ("~", 1)),
("058", "((-1))", ("~", 1)),
("059", "(((-1)))", ("~", 1)),
("060", "((((-1))))", ("~", 1)),
("061", "(-1)", ("~", 1)),
("062", "(--1)", ("~", ("~", 1))),
("063", "(---1)", ("~", ("~", ("~", 1)))),
("064", "(----1)", ("~", ("~", ("~", ("~", 1))))),
("065", "-(1)", ("~", 1)),
("066", "-(-(1))", ("~", ("~", 1))),
("067", "-(-(-(1)))", ("~", ("~", ("~", 1)))),
("068", "-(-(-(-(1))))", ("~", ("~", ("~", ("~", 1))))),
("069", "-(-1)", ("~", ("~", 1))),
("070", "-(--1)", ("~", ("~", ("~", 1)))),
("071", "-(---1)", ("~", ("~", ("~", ("~", 1))))),
("072", "1^-2", ("^", 1, ("~", 2))),
("073", "-1^2", ("~", ("^", 1, 2))),
("074", "-1^-2", ("~", ("^", 1, ("~", 2)))),
("075", "1^--2", ("^", 1, ("~", ("~", 2)))),
("076", "--1^2", ("~", ("~", ("^", 1, 2)))),
("077", "--1^--2", ("~", ("~", ("^", 1, ("~", ("~", 2)))))),
("078", "1^-2^3", ("^", 1, ("~", ("^", 2, 3)))),
("079", "1^-2^-3", ("^", 1, ("~", ("^", 2, ("~", 3))))),
("080", "-1^-2^-3", ("~", ("^", 1, ("~", ("^", 2, ("~", 3)))))),
("081", "(1^-2)", ("^", 1, ("~", 2))),
("082", "(-1^2)", ("~", ("^", 1, 2))),
("083", "(-1^-2)", ("~", ("^", 1, ("~", 2)))),
("084", "(--1^2)", ("~", ("~", ("^", 1, 2)))),
("085", "(--1^--2)", ("~", ("~", ("^", 1, ("~", ("~", 2)))))),
("086", "1^(-2)", ("^", 1, ("~", 2))),
("087", "(-1)^2", ("^", ("~", 1), 2)),
("088", "(-1)^(-2)", ("^", ("~", 1), ("~", 2))),
("089", "(-1)^(-2)^3", ("^", ("~", 1), ("^", ("~", 2), 3))),
("090", "(-1)^(-2)^(-3)", ("^", ("~", 1), ("^", ("~", 2), ("~", 3)))),
("091", "(1)^(2)", ("^", 1, 2)),
("092", "(1)^(2)^(3)", ("^", 1, ("^", 2, 3))),
("093", "(1)^(2)^(3)^(4)", ("^", 1, ("^", 2, ("^", 3, 4)))),
("094", "(1)^2", ("^", 1, 2)),
("095", "(1^2)^3", ("^", ("^", 1, 2), 3)),
("096", "((1^2)^3)^4", ("^", ("^", ("^", 1, 2), 3), 4)),
("097", "1^(2)", ("^", 1, 2)),
("098", "1^(2^3)", ("^", 1, ("^", 2, 3))),
("099", "1^(2^(3^4))", ("^", 1, ("^", 2, ("^", 3, 4)))),
("100", "(1^2)^(3^4)", ("^", ("^", 1, 2), ("^", 3, 4))),
("101", "(1)", 1),
("102", "((1))", 1),
("103", "(((1)))", 1),
("104", "((((1))))", 1),
("105", "(((((1)))))", 1),
("106", "((((((1))))))", 1),
("107", "(((((((1)))))))", 1),
("108", "((((((((1))))))))", 1),
("109", "(((((((((1)))))))))", 1),
("110", "1*2^3", ("*", 1, ("^", 2, 3))),
("111", "1^2*3", ("*", ("^", 1, 2), 3)),
("112", "1 + 2^3", ("+", 1, ("^", 2, 3))),
("113", "1^2 + 3", ("+", ("^", 1, 2), 3)),
("114", "1*2^3 + 4*5^6",
  ("+", ("*", 1, ("^", 2, 3)), ("*", 4, ("^", 5, 6)))),
("115", "1^2*3 + 4^5*6",
  ("+", ("*", ("^", 1, 2), 3), ("*", ("^", 4, 5), 6))),
("116", "1 + -2", ("+", 1, ("~", 2))),
("117", "-1 + 2", ("+", ("~", 1), 2)),
("118", "1*-2", ("*", 1, ("~", 2))),
("119", "-1*2", ("*", ("~", 1), 2)),
("120", "-1 + -2", ("+", ("~", 1), ("~", 2))),
("121", "-1*-2", ("*", ("~", 1), ("~", 2))),
("122", "(1 + -2)", ("+", 1, ("~", 2))),
("123", "(-1 + 2)", ("+", ("~", 1), 2)),
("124", "(1*-2)", ("*", 1, ("~", 2))),
("125", "(-1*2)", ("*", ("~", 1), 2)),
("126", "(-1 + -2)", ("+", ("~", 1), ("~", 2))),
("127", "(-1*-2)", ("*", ("~", 1), ("~", 2))),
("128", "1+2-3", ("-", ("+", 1, 2), 3)),
("129", "1-2+3", ("+", ("-", 1, 2), 3)),
("130", "1*2/3", ("/", ("*", 1, 2), 3)),
("131", "1/2*3", ("*", ("/", 1, 2), 3))
]

def run_tests(modules):
    for m in modules:
        mod = __import__(m)
        ast = mod.ast
        for (i, s, t) in test_table:
            try:
                assert ast(s) == t, f"{m}, test {i}:\nast({s}) = {ast(s)}, expected {t}"
            except mod.SyntaxError as e:
                print(f"{m}, test {i}:\nSyntax error: {e}")
                return

run_tests(["pratt", "recursive_descent", "shunting_yard"])
